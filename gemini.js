// gemini.js
require("dotenv").config(); // ƒë·ªÅ ph√≤ng tr∆∞·ªùng h·ª£p file n√†y ƒë∆∞·ª£c require tr∆∞·ªõc index.js

const { GoogleGenerativeAI } = require("@google/generative-ai");

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
if (!GEMINI_API_KEY) {
  console.warn("[Gemini] Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng!");
}

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY || ""); // tr√°nh undefined
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

/**
 * G·ªçi Gemini v·ªõi prompt vƒÉn b·∫£n v√† tr·∫£ v·ªÅ chu·ªói tr·∫£ l·ªùi.
 * @param {string} question
 * @returns {Promise<string>}
 */
async function askGemini(question) {
  if (!GEMINI_API_KEY) {
    return "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY, kh√¥ng th·ªÉ g·ªçi Gemini.";
  }

  try {
    const result = await model.generateContent(question);

    // M·ªôt s·ªë phi√™n b·∫£n SDK c√≥ .response.text(), nh∆∞ng ki·ªÉm tra an to√†n:
    let text = "";
    if (result?.response?.text) {
      text = result.response.text();
    } else if (
      result?.response?.candidates?.[0]?.content?.parts?.[0]?.text
    ) {
      text = result.response.candidates[0].content.parts[0].text;
    }

    text = (text || "").trim();
    if (!text) {
      text = "ü§î Gemini kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.";
    }
    return text;

  } catch (error) {
    console.error("Gemini API error:", error?.response?.data || error);
    return "‚ùå L·ªói khi g·ªçi Gemini API.";
  }
}

module.exports = { askGemini };
