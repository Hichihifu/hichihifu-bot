// gemini.js
const { GoogleGenerativeAI } = require("@google/generative-ai");

// L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

/**
 * H√†m g·ªçi Gemini v·ªõi context + c√° nh√¢n h√≥a
 * @param {string} question - C√¢u h·ªèi c·ªßa user
 * @param {Array} history - Danh s√°ch h·ªôi tho·∫°i [{role:"user"|"bot", text:"..."}]
 * @param {object} userConfig - {style, tone}
 */
async function askGemini(question, history = [], userConfig = {}) {
  try {
    const style = userConfig.style || "t·ª± nhi√™n";
    const tone = userConfig.tone || "th√¢n thi·ªán";

    // Prompt ch√≠nh
    const baseInstruction = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán, tr·∫£ l·ªùi t·ª± nhi√™n, gi·ªëng con ng∆∞·ªùi.
Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√™m emoji n·∫øu ph√π h·ª£p.
Phong c√°ch: ${style}, Tone: ${tone}.
ƒê·ª´ng tr·∫£ l·ªùi qu√° ng·∫Øn, h√£y th√™m v√≠ d·ª• n·∫øu ph√π h·ª£p.
    `;

    // G·∫Øn h·ªôi tho·∫°i tr∆∞·ªõc (ng·ªØ c·∫£nh)
    const historyPrompt = history
      .map((h) => `${h.role === "user" ? "Ng∆∞·ªùi d√πng" : "Bot"}: ${h.text}`)
      .join("\n");

    const fullPrompt = `
${baseInstruction}

ƒê√¢y l√† h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥:
${historyPrompt}

Ng∆∞·ªùi d√πng: ${question}
Bot:
    `;

    // G·ªçi API Gemini
    const result = await model.generateContent(fullPrompt);

    console.log("Gemini raw result:", JSON.stringify(result.response, null, 2));

    // L·∫•y text tr·∫£ v·ªÅ
    const text =
      (result?.response?.text && result.response.text()) ||
      (result?.response?.candidates?.[0]?.content?.parts?.[0]?.text) ||
      "";

    return text.trim() || "ü§î M√¨nh ch∆∞a nghƒ© ra c√¢u tr·∫£ l·ªùi!";
  } catch (error) {
    console.error("Gemini API error:", error);
    throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini API.");
  }
}

module.exports = { askGemini };
