const { GoogleGenerativeAI } = require("@google/generative-ai");

// L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

/**
 * H√†m g·ªçi Gemini v·ªõi context + c√° nh√¢n h√≥a m·∫°nh (Few-shot)
 * @param {string} question - C√¢u h·ªèi c·ªßa user
 * @param {Array} history - Danh s√°ch h·ªôi tho·∫°i [{role:"user"|"bot", text:"..."}]
 * @param {object} userConfig - {style, tone}
 */
async function askGemini(question, history = [], userConfig = {}) {
  try {
    const style = userConfig.style || "t·ª± nhi√™n";
    const tone = userConfig.tone || "trung l·∫≠p";

    // Prompt n√¢ng c·∫•p v·ªõi v√≠ d·ª• c·ª• th·ªÉ cho c√°c tone
    const baseInstruction = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. Quy t·∫Øc:
- Phong c√°ch (Style): ${style}.
- Tone: ${tone}.
- N·∫øu tone l√†:
    - "th√¢n thi·ªán": d√πng t·ª´ g·∫ßn g≈©i, th√™m emoji d·ªÖ th∆∞∆°ng (üòäüå∏).
    - "nghi√™m t√∫c": kh√¥ng emoji, ng√¥n ng·ªØ chu·∫©n m·ª±c.
    - "h√†i h∆∞·ªõc": ch√®n c√¢u ƒë√πa, emoji vui nh·ªôn (üòÇü§£).
    - "ng·ªçt ng√†o": d√πng t·ª´ ng·ªçt ng√†o, emoji (üíñü•∞).
- Lu√¥n tu√¢n th·ªß style v√† tone khi tr·∫£ l·ªùi.
- Tr√°nh tr·∫£ l·ªùi qu√° ng·∫Øn.

V√≠ d·ª•:
Ng∆∞·ªùi d√πng: Gi·ªõi thi·ªáu b·∫£n th√¢n | Style: vui nh·ªôn | Tone: h√†i h∆∞·ªõc
Bot: "üòÇ Xin ch√†o! M√¨nh l√† bot vui nh·ªôn nh·∫•t qu·∫£ ƒë·∫•t! B·∫°n h·ªèi g√¨ m√¨nh tr·∫£ l·ªùi h·∫øt ü§£"

Ng∆∞·ªùi d√πng: Gi·ªõi thi·ªáu b·∫£n th√¢n | Style: nghi√™m t√∫c | Tone: trang tr·ªçng
Bot: "Xin ch√†o, t√¥i l√† m·ªôt tr·ª£ l√Ω AI ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ h·ªó tr·ª£ c√¥ng vi·ªác c·ªßa b·∫°n m·ªôt c√°ch hi·ªáu qu·∫£ v√† ch√≠nh x√°c."

Ng∆∞·ªùi d√πng: Gi·ªõi thi·ªáu b·∫£n th√¢n | Style: s√°ng t·∫°o | Tone: ng·ªçt ng√†o
Bot: "üíñ Hey b·∫°n ∆°i! M√¨nh ·ªü ƒë√¢y ƒë·ªÉ l√†m ng√†y c·ªßa b·∫°n th√™m r·ª±c r·ª° üå∏ H·ªèi m√¨nh b·∫•t c·ª© ƒëi·ªÅu g√¨ nh√©!"

---

ƒê√¢y l√† h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥:
${history.map(h => `${h.role === "user" ? "Ng∆∞·ªùi d√πng" : "Bot"}: ${h.text}`).join("\n")}

Ng∆∞·ªùi d√πng: ${question}
Bot:
`;

    const result = await model.generateContent(baseInstruction);

    console.log("Gemini raw result:", JSON.stringify(result.response, null, 2));

    const text =
      (result?.response?.text && result.response.text()) ||
      (result?.response?.candidates?.[0]?.content?.parts?.[0]?.text) ||
      "";

    return text.trim() || "ü§î M√¨nh ch∆∞a nghƒ© ra c√¢u tr·∫£ l·ªùi!";
  } catch (error) {
    console.error("Gemini API error:", error);
    throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini API.");
  }
}

module.exports = { askGemini };
